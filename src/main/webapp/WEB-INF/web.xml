<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

	<display-name>JeeSite</display-name>

	<!--1、spring 框架解决字符串编码问题：过滤器 CharacterEncodingFilter（filter-name）
	    2、在web.xml配置监听器ContextLoaderListener（listener-class）
	       ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，
	       在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。
	    3、部署applicationContext的xml文件：contextConfigLocation（context-param下的param-name）
	    4、DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自已定义，把拦截下来的请求，依据某某规则分发到目标Controller(我们写的Action)来处理。
	      DispatcherServlet（servlet-name、servlet-class、init-param、param-name(contextConfigLocation)、param-value）
	      在DispatcherServlet的初始化过程中，框架会在web应用的 WEB-INF文件夹下寻找名为[servlet-name]-servlet.xml 的配置文件，生成文件中定义的bean-->


	<!--系统自动加载文件-->
	<!-- 项目中使用Spring 时，applicationContext.xml配置文件中并没有BeanFactory，要想在业
    务层中的class 文件中直接引用Spring容器管理的bean可通过以下方式-->

	<!--部署applicationContext的xml文件：contextConfigLocation（context-param下的param-name）-->
	<!--1、在web.xml配置监听器ContextLoaderListener-->
	<!--ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。因为
    它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。
    使用servletContextListener接口，开发者能够在为客户端请求提供服务之前向servletContext中添任何对象，
    这个对象在servletcontxxt启动的时候被初始化，然后在ervletContext的整个运行期间都是可见的。
        在ContextLoaderListener中关联了ContextLoader这个类，所以整个加载配置过程由ContextLoader来完成。
        它的API说明
        第一段说明ContextLoader可以由 ContextLoaderListener和ContextLoaderServlet生成。
        如果查看ContextLoaderServlet的API，可以看到它也关联了ContextLoader这个类而且它实现了HttpServlet这个接口
        第二段，ContextLoader创建的是 XmlWebApplicationContext这样一个类，它实现的接口是WebApplicationContext->ConfigurableWebApplicationContext->ApplicationContext->
        BeanFactory这样一来spring中的所有bean都由这个类来创建
         IUploaddatafileManager uploadmanager = (IUploaddatafileManager)    ContextLoaderListener.getCurrentWebApplicationContext().getBean("uploadManager");
         -->

    <!--2、部署applicationContext的xml文件
	<部署applicationContext的xml文件-->
	<!--如果在web.xml中不写任何参数配置信息，默认的路径是"/WEB-INF/applicationContext.xml，
    在WEB-INF目录下创建的xml文件的名称必须是applicationContext.xml。
    如果是要自定义文件名可以在web.xml里加入contextConfigLocation这个context参数：
    在<param-value> </param-value>里指定相应的xml文件名，如果有多个xml文件，可以写在一起并以“,”号分隔。
    也可以这样applicationContext-*.xml采用通配符，比如这那个目录下有applicationContext-ibatis-base.xml，
    applicationContext-action.xml，applicationContext-ibatis-dao.xml等文件，都会一同被载入。
    在ContextLoaderListener中关联了ContextLoader这个类，所以整个加载配置过程由ContextLoader来完成。-->

	<!--自定义文件名可以在web.xml里加入contextConfigLocation这个context参数-->
	<context-param>
		<!--在<param-value> </param-value>里指定相应的xml文件名，如果有多个xml文件，可以写在一起并以“,”号分隔。
		也可以这样applicationContext-*.xml采用通配符，比如这那个目录下有applicationContext-ibatis-base.xml，
		applicationContext-action.xml，applicationContext-ibatis-dao.xml等文件，都会一同被载入。-->
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:/spring-context*.xml</param-value>
	</context-param>


	<listener>
		<listener-class>com.thinkgem.jeesite.modules.sys.listener.WebContextListener</listener-class>
	</listener>
	<listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>  
	</listener>
	
	     <!-- 在web.xml添加post乱码filter：CharacterEncodingFilter -->
	     <!--  对于get请求中文参数出现乱码解决方法有两个：
         a. 修改tomcat配置文件添加编码与工程编码一致，如下：
         <Connector URIEncoding="utf-8" connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443"/>
         b. 对参数进行重新编码：
        String userName = new String(request.getParamter("userName").getBytes("ISO8859-1"),"utf-8")
        ISO8859-1是tomcat默认编码，需要将tomcat编码后的内容按utf-8编码 -->

	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- Apache Shiro -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- PageCache, cache .html suffix.
	<filter>
		<filter-name>PageCacheFilter</filter-name>
		<filter-class>com.thinkgem.jeesite.common.filter.PageCachingFilter</filter-class>
		<init-param>
			<param-name>cacheName</param-name>
			<param-value>pageCachingFilter</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>PageCacheFilter</filter-name>
		<url-pattern>/</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>PageCacheFilter</filter-name>
		<url-pattern>*.html</url-pattern>
	</filter-mapping>-->

	<!-- SiteMesh -->

	<filter>
		<filter-name>sitemeshFilter</filter-name>
		<filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemeshFilter</filter-name>
		<url-pattern>/a/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>sitemeshFilter</filter-name>
		<url-pattern>/f/*</url-pattern>
	</filter-mapping>
	
	<!-- MVC Servlet -->
	<!--使用Spring MVC,配置DispatcherServlet是第一步。DispatcherServlet是一个Servlet,,所以可以配置多个DispatcherServlet-->
	<!--DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自已定义，把拦截下来的请求，
	    依据某某规则分发到目标Controller(我们写的Action)来处理。-->

	<servlet>
	    <!-- servelt的名称 -->
		<!--在DispatcherServlet的初始化过程中，框架会在web应用的 WEB-INF文件夹下寻找名为[servlet-name]-servlet.xml 的配置文件，生成文件中定义的bean-->
		<servlet-name>springServlet</servlet-name>
		<!-- servelt对应的java类 -->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		
		<!-- 当前servelt的参数信息 -->
		<!--指明了配置文件的文件名，不使用默认配置文件名，而使用spring-mvc*.xml配置文件。-->
		<init-param>
		    <!-- contextConfigLocation为参数名称，该参数的值包含SpringMVC的配置文件路径
		     contextConfigLocation：表示用于加载Bean的配置文件；-->
			<param-name>contextConfigLocation</param-name>
			<!--其中<param-value>**.xml</param-value> 这里可以使用多种写法-->
			<!--1、不写,使用默认值:/WEB-INF/<servlet-name>-servlet.xml-->
			<!--2、<param-value>/WEB-INF/classes/dispatcher-servlet.xml</param-value>-->
			<!--3、<param-value>classpath*:dispatcher-servlet.xml</param-value>-->
			<!--4、多个值用逗号分隔-->
			<param-value>classpath*:/spring-mvc*.xml</param-value>
		</init-param>
		<!-- 在web引用启动时立即加载servlet -->
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!-- servelt的映射声明 -->
	<!--这个Servlet的名字是springServlet，可以有多个DispatcherServlet，是通过名字来区分的。每一个DispatcherServlet有自己的WebApplicationContext上下文对象。
	同时保存的ServletContext中和Request对象中.-->
	<!--ApplicationContext是Spring的核心，Context我们通常解释为上下文环境，我想用“容器”来表述它更容易理解一些，ApplicationContext则是“应用的容器”了
	:P，Spring把Bean放在这个容器中，在需要的时候，用getBean方法取出-->
	<servlet-mapping>
	    <!-- 请求对应的servelt的名称 -->
		<servlet-name>springServlet</servlet-name>
		<!-- 监听当前所有域的请求 -->
		<!--1、拦截*.do、*.htm， 例如：/user/add.do,这是最传统的方式，最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。-->
		<!--2、拦截/，例如：/user/add,可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。 -->
		<!--会拦截URL中带“/”的请求。-->
		<url-pattern>/</url-pattern>
	</servlet-mapping>












	<!-- Activiti diagram-view callback filter-->
	<filter>
		<filter-name>JSONPFilter</filter-name>
		<filter-class>com.thinkgem.jeesite.modules.act.rest.servlet.JsonpCallbackFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>JSONPFilter</filter-name>
		<url-pattern>/act/service/*</url-pattern>
	</filter-mapping>

	<!-- DruidStatView -->
	<servlet>
		<servlet-name>DruidStatView</servlet-name>
		<servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
		<init-param>
			<param-name>allow</param-name>
			<param-value>127.0.0.1</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>DruidStatView</servlet-name>
		<url-pattern>/druid/*</url-pattern>
	</servlet-mapping>
	
	<!-- CKFinder -->
	<servlet>
		<servlet-name>CKFinderConnectorServlet</servlet-name>
		<servlet-class>com.thinkgem.jeesite.common.web.CKFinderConnectorServlet</servlet-class>
		<init-param>
			<param-name>XMLConfig</param-name>
			<param-value>/WEB-INF/ckfinder.xml</param-value>
		</init-param>
		<init-param>
			<param-name>debug</param-name>
			<param-value>false</param-value>
		</init-param>
		<init-param>
			<param-name>configuration</param-name>
			<param-value>com.thinkgem.jeesite.common.web.CKFinderConfig</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>CKFinderConnectorServlet</servlet-name>
		<url-pattern>/static/ckfinder/core/connector/java/connector.java</url-pattern>
	</servlet-mapping>

	<filter>
		<filter-name>FileUploadFilter</filter-name>
		<filter-class>com.ckfinder.connector.FileUploadFilter</filter-class>
		<init-param>
			<param-name>sessionCookieName</param-name>
			<param-value>JSESSIONID</param-value>
		</init-param>
		<init-param>
			<param-name>sessionParameterName</param-name>
			<param-value>jsessionid</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>FileUploadFilter</filter-name>
		<url-pattern>/static/ckfinder/core/connector/java/connector.java</url-pattern>
	</filter-mapping>

	<!-- Userfiles download -->
	<servlet>
	  	<servlet-name>UserfilesDownloadServlet</servlet-name>
	  	<servlet-class>com.thinkgem.jeesite.common.servlet.UserfilesDownloadServlet</servlet-class>
	</servlet>
	<servlet-mapping>
	  	<servlet-name>UserfilesDownloadServlet</servlet-name>
	  	<url-pattern>/userfiles/*</url-pattern>
	</servlet-mapping>
	
	<!-- Validate code -->
	<servlet>
		<servlet-name>ValidateCodeServlet</servlet-name>
		<servlet-class>com.thinkgem.jeesite.common.servlet.ValidateCodeServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>ValidateCodeServlet</servlet-name>
		<url-pattern>/servlet/validateCodeServlet</url-pattern>
	</servlet-mapping>
	
	
	<servlet>
        <servlet-name>ureportServlet</servlet-name>
        <servlet-class>com.bstek.ureport.console.UReportServlet</servlet-class>
	</servlet>
	<servlet-mapping>
	    <servlet-name>ureportServlet</servlet-name>
	    <url-pattern>/ureport/*</url-pattern>
	</servlet-mapping>
	
	<!-- FineReport 
	<servlet>
		<servlet-name>ReportServer</servlet-name>
		<servlet-class>com.fr.web.ReportServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>ReportServer</servlet-name>
		<url-pattern>/ReportServer</url-pattern>
	</servlet-mapping>-->
	
	<!-- [INSERT FRAGMENT HERE] -->

	<!-- Session configure, to "jeesite.properties" file "session.sessionTimeout" parameter.
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>-->

	<!-- Error page -->
	<!-- <error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/WEB-INF/views/error/500.jsp</location>
	</error-page> -->
	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/views/error/500.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/views/error/404.jsp</location>
	</error-page>

</web-app>